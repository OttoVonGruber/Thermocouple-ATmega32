
Thermocouple_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000670  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  00000670  000006e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000070a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000073c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000778  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cb6  00000000  00000000  000007f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000703  00000000  00000000  000014ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000574  00000000  00000000  00001bb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000134  00000000  00000000  00002128  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000421  00000000  00000000  0000225c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000621  00000000  00000000  0000267d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00002c9e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e7       	ldi	r30, 0x70	; 112
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 38       	cpi	r26, 0x86	; 134
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 b6 01 	call	0x36c	; 0x36c <main>
  7a:	0c 94 36 03 	jmp	0x66c	; 0x66c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcd_cmd>:
	}
}

void lcd_set_cursor(uint8_t row, uint8_t col) {
	uint8_t address = (row == 0 ? 0x80 : 0xC0) + col; // Calculate address
	lcd_cmd(address); // Send command to set cursor
  82:	9f ef       	ldi	r25, 0xFF	; 255
  84:	91 bb       	out	0x11, r25	; 17
  86:	94 b3       	in	r25, 0x14	; 20
  88:	90 6c       	ori	r25, 0xC0	; 192
  8a:	94 bb       	out	0x14, r25	; 20
  8c:	95 b3       	in	r25, 0x15	; 21
  8e:	9f 77       	andi	r25, 0x7F	; 127
  90:	95 bb       	out	0x15, r25	; 21
  92:	82 bb       	out	0x12, r24	; 18
  94:	85 b3       	in	r24, 0x15	; 21
  96:	80 64       	ori	r24, 0x40	; 64
  98:	85 bb       	out	0x15, r24	; 21
  9a:	00 c0       	rjmp	.+0      	; 0x9c <lcd_cmd+0x1a>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <lcd_cmd+0x1c>
  9e:	00 00       	nop
  a0:	85 b3       	in	r24, 0x15	; 21
  a2:	8f 7b       	andi	r24, 0xBF	; 191
  a4:	85 bb       	out	0x15, r24	; 21
  a6:	87 ea       	ldi	r24, 0xA7	; 167
  a8:	91 e6       	ldi	r25, 0x61	; 97
  aa:	01 97       	sbiw	r24, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <lcd_cmd+0x28>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <lcd_cmd+0x2e>
  b0:	00 00       	nop
  b2:	08 95       	ret

000000b4 <lcd_init>:
  b4:	8f ef       	ldi	r24, 0xFF	; 255
  b6:	81 bb       	out	0x11, r24	; 17
  b8:	84 b3       	in	r24, 0x14	; 20
  ba:	80 6c       	ori	r24, 0xC0	; 192
  bc:	84 bb       	out	0x14, r24	; 20
  be:	87 ea       	ldi	r24, 0xA7	; 167
  c0:	91 e6       	ldi	r25, 0x61	; 97
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <lcd_init+0xe>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <lcd_init+0x14>
  c8:	00 00       	nop
  ca:	80 e3       	ldi	r24, 0x30	; 48
  cc:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
  d0:	80 e3       	ldi	r24, 0x30	; 48
  d2:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
  d6:	80 e3       	ldi	r24, 0x30	; 48
  d8:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
  dc:	88 e3       	ldi	r24, 0x38	; 56
  de:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
  e2:	8e e0       	ldi	r24, 0x0E	; 14
  e4:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
  e8:	86 e0       	ldi	r24, 0x06	; 6
  ea:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
  f4:	08 95       	ret

000000f6 <lcd_data>:
  f6:	9f ef       	ldi	r25, 0xFF	; 255
  f8:	91 bb       	out	0x11, r25	; 17
  fa:	94 b3       	in	r25, 0x14	; 20
  fc:	90 6c       	ori	r25, 0xC0	; 192
  fe:	94 bb       	out	0x14, r25	; 20
 100:	95 b3       	in	r25, 0x15	; 21
 102:	90 68       	ori	r25, 0x80	; 128
 104:	95 bb       	out	0x15, r25	; 21
 106:	82 bb       	out	0x12, r24	; 18
 108:	85 b3       	in	r24, 0x15	; 21
 10a:	80 64       	ori	r24, 0x40	; 64
 10c:	85 bb       	out	0x15, r24	; 21
 10e:	00 c0       	rjmp	.+0      	; 0x110 <lcd_data+0x1a>
 110:	00 c0       	rjmp	.+0      	; 0x112 <lcd_data+0x1c>
 112:	00 00       	nop
 114:	85 b3       	in	r24, 0x15	; 21
 116:	8f 7b       	andi	r24, 0xBF	; 191
 118:	85 bb       	out	0x15, r24	; 21
 11a:	89 ef       	ldi	r24, 0xF9	; 249
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <lcd_data+0x28>
 122:	00 c0       	rjmp	.+0      	; 0x124 <lcd_data+0x2e>
 124:	00 00       	nop
 126:	08 95       	ret

00000128 <lcd_print>:
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
 12c:	ec 01       	movw	r28, r24
 12e:	03 c0       	rjmp	.+6      	; 0x136 <lcd_print+0xe>
 130:	21 96       	adiw	r28, 0x01	; 1
 132:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_data>
 136:	88 81       	ld	r24, Y
 138:	81 11       	cpse	r24, r1
 13a:	fa cf       	rjmp	.-12     	; 0x130 <lcd_print+0x8>
 13c:	df 91       	pop	r29
 13e:	cf 91       	pop	r28
 140:	08 95       	ret

00000142 <spi_init>:
}

void spi_init(void) {
	DDRB = (1 << PB7) | (1 << PB4); // Set SCK and SS as output
 142:	80 e9       	ldi	r24, 0x90	; 144
 144:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1 << PB6); // Set MISO as input
 146:	87 b3       	in	r24, 0x17	; 23
 148:	8f 7b       	andi	r24, 0xBF	; 191
 14a:	87 bb       	out	0x17, r24	; 23
	SPCR = (1 << SPE) | (1 << MSTR); // Enable SPI, set as master
 14c:	80 e5       	ldi	r24, 0x50	; 80
 14e:	8d b9       	out	0x0d, r24	; 13
	SPSR = (1 << SPI2X); // Enable double speed
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	8e b9       	out	0x0e, r24	; 14
 154:	08 95       	ret

00000156 <spi_transfer>:
}

uint8_t spi_transfer(void) {
	SPDR = 0x00; // Start transmission with dummy data
 156:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1 << SPIF))); // Wait for transmission complete
 158:	77 9b       	sbis	0x0e, 7	; 14
 15a:	fe cf       	rjmp	.-4      	; 0x158 <spi_transfer+0x2>
	return SPDR; // Return received data
 15c:	8f b1       	in	r24, 0x0f	; 15
}
 15e:	08 95       	ret

00000160 <read_max31855>:

int32_t read_max31855(void) {
 160:	cf 92       	push	r12
 162:	df 92       	push	r13
 164:	ef 92       	push	r14
 166:	ff 92       	push	r15
	int32_t value = 0;
	PORTB &= ~(1 << PB4); // CS Low to start communication
 168:	88 b3       	in	r24, 0x18	; 24
 16a:	8f 7e       	andi	r24, 0xEF	; 239
 16c:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16e:	00 00       	nop
	_delay_us(1);
	value |= ((int32_t)spi_transfer() << 24); // Read MSB
 170:	0e 94 ab 00 	call	0x156	; 0x156 <spi_transfer>
 174:	c8 2e       	mov	r12, r24
 176:	d1 2c       	mov	r13, r1
 178:	e1 2c       	mov	r14, r1
 17a:	f1 2c       	mov	r15, r1
 17c:	fc 2c       	mov	r15, r12
 17e:	ee 24       	eor	r14, r14
 180:	dd 24       	eor	r13, r13
 182:	cc 24       	eor	r12, r12
	value |= ((int32_t)spi_transfer() << 16);
 184:	0e 94 ab 00 	call	0x156	; 0x156 <spi_transfer>
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	a0 e0       	ldi	r26, 0x00	; 0
 18c:	b0 e0       	ldi	r27, 0x00	; 0
 18e:	dc 01       	movw	r26, r24
 190:	99 27       	eor	r25, r25
 192:	88 27       	eor	r24, r24
 194:	c8 2a       	or	r12, r24
 196:	d9 2a       	or	r13, r25
 198:	ea 2a       	or	r14, r26
 19a:	fb 2a       	or	r15, r27
	value |= ((int32_t)spi_transfer() << 8);
 19c:	0e 94 ab 00 	call	0x156	; 0x156 <spi_transfer>
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	a0 e0       	ldi	r26, 0x00	; 0
 1a4:	b0 e0       	ldi	r27, 0x00	; 0
 1a6:	ba 2f       	mov	r27, r26
 1a8:	a9 2f       	mov	r26, r25
 1aa:	98 2f       	mov	r25, r24
 1ac:	88 27       	eor	r24, r24
 1ae:	c8 2a       	or	r12, r24
 1b0:	d9 2a       	or	r13, r25
 1b2:	ea 2a       	or	r14, r26
 1b4:	fb 2a       	or	r15, r27
	value |= (int32_t)spi_transfer(); // Read LSB
 1b6:	0e 94 ab 00 	call	0x156	; 0x156 <spi_transfer>
 1ba:	a7 01       	movw	r20, r14
 1bc:	96 01       	movw	r18, r12
 1be:	28 2b       	or	r18, r24
 1c0:	ca 01       	movw	r24, r20
 1c2:	b9 01       	movw	r22, r18
	PORTB |= (1 << PB4); // CS High to end communication
 1c4:	28 b3       	in	r18, 0x18	; 24
 1c6:	20 61       	ori	r18, 0x10	; 16
 1c8:	28 bb       	out	0x18, r18	; 24
	return value;
}
 1ca:	ff 90       	pop	r15
 1cc:	ef 90       	pop	r14
 1ce:	df 90       	pop	r13
 1d0:	cf 90       	pop	r12
 1d2:	08 95       	ret

000001d4 <get_thermocouple_temp>:

float get_thermocouple_temp(int32_t value) {
 1d4:	0f 93       	push	r16
 1d6:	1f 93       	push	r17
	if (value & 0x7) return NAN; // Check for errors
 1d8:	8b 01       	movw	r16, r22
 1da:	9c 01       	movw	r18, r24
 1dc:	07 70       	andi	r16, 0x07	; 7
 1de:	11 27       	eor	r17, r17
 1e0:	22 27       	eor	r18, r18
 1e2:	33 27       	eor	r19, r19
 1e4:	01 2b       	or	r16, r17
 1e6:	02 2b       	or	r16, r18
 1e8:	03 2b       	or	r16, r19
 1ea:	b9 f4       	brne	.+46     	; 0x21a <get_thermocouple_temp+0x46>
	value >>= 18; // Discard unnecessary bits
 1ec:	05 2e       	mov	r0, r21
 1ee:	52 e1       	ldi	r21, 0x12	; 18
 1f0:	95 95       	asr	r25
 1f2:	87 95       	ror	r24
 1f4:	77 95       	ror	r23
 1f6:	67 95       	ror	r22
 1f8:	5a 95       	dec	r21
 1fa:	d1 f7       	brne	.-12     	; 0x1f0 <get_thermocouple_temp+0x1c>
 1fc:	50 2d       	mov	r21, r0
	if (value & 0x2000) { // Check if negative temperature
 1fe:	75 ff       	sbrs	r23, 5
 200:	03 c0       	rjmp	.+6      	; 0x208 <get_thermocouple_temp+0x34>
		value |= 0xFFFFC000; // Sign extend
 202:	70 6c       	ori	r23, 0xC0	; 192
 204:	8f 6f       	ori	r24, 0xFF	; 255
 206:	9f 6f       	ori	r25, 0xFF	; 255
	}
	return value * 0.25; // Convert to Celsius
 208:	0e 94 15 02 	call	0x42a	; 0x42a <__floatsisf>
 20c:	20 e0       	ldi	r18, 0x00	; 0
 20e:	30 e0       	ldi	r19, 0x00	; 0
 210:	40 e8       	ldi	r20, 0x80	; 128
 212:	5e e3       	ldi	r21, 0x3E	; 62
 214:	0e 94 79 02 	call	0x4f2	; 0x4f2 <__mulsf3>
 218:	04 c0       	rjmp	.+8      	; 0x222 <get_thermocouple_temp+0x4e>
	PORTB |= (1 << PB4); // CS High to end communication
	return value;
}

float get_thermocouple_temp(int32_t value) {
	if (value & 0x7) return NAN; // Check for errors
 21a:	60 e0       	ldi	r22, 0x00	; 0
 21c:	70 e0       	ldi	r23, 0x00	; 0
 21e:	80 ec       	ldi	r24, 0xC0	; 192
 220:	9f e7       	ldi	r25, 0x7F	; 127
	value >>= 18; // Discard unnecessary bits
	if (value & 0x2000) { // Check if negative temperature
		value |= 0xFFFFC000; // Sign extend
	}
	return value * 0.25; // Convert to Celsius
}
 222:	1f 91       	pop	r17
 224:	0f 91       	pop	r16
 226:	08 95       	ret

00000228 <get_internal_temp>:

float get_internal_temp(int32_t value) {
	value >>= 4; // Discard unnecessary bits
 228:	dc 01       	movw	r26, r24
 22a:	cb 01       	movw	r24, r22
 22c:	68 94       	set
 22e:	13 f8       	bld	r1, 3
 230:	b5 95       	asr	r27
 232:	a7 95       	ror	r26
 234:	97 95       	ror	r25
 236:	87 95       	ror	r24
 238:	16 94       	lsr	r1
 23a:	d1 f7       	brne	.-12     	; 0x230 <get_internal_temp+0x8>
	if (value & 0x800) { // Check if negative temperature
 23c:	93 ff       	sbrs	r25, 3
 23e:	03 c0       	rjmp	.+6      	; 0x246 <get_internal_temp+0x1e>
		value |= 0xFFFFF000; // Sign extend
 240:	90 6f       	ori	r25, 0xF0	; 240
 242:	af 6f       	ori	r26, 0xFF	; 255
 244:	bf 6f       	ori	r27, 0xFF	; 255
	}
	return (value & 0xFFF) * 0.0625; // Convert to Celsius
 246:	bc 01       	movw	r22, r24
 248:	cd 01       	movw	r24, r26
 24a:	7f 70       	andi	r23, 0x0F	; 15
 24c:	88 27       	eor	r24, r24
 24e:	99 27       	eor	r25, r25
 250:	0e 94 15 02 	call	0x42a	; 0x42a <__floatsisf>
 254:	20 e0       	ldi	r18, 0x00	; 0
 256:	30 e0       	ldi	r19, 0x00	; 0
 258:	40 e8       	ldi	r20, 0x80	; 128
 25a:	5d e3       	ldi	r21, 0x3D	; 61
 25c:	0e 94 79 02 	call	0x4f2	; 0x4f2 <__mulsf3>
}
 260:	08 95       	ret

00000262 <int_to_string_fixed>:

void int_to_string_fixed(char* buffer, int value, uint8_t width) {
 262:	fc 01       	movw	r30, r24
 264:	cb 01       	movw	r24, r22
	if (value < 0) {
 266:	99 23       	and	r25, r25
 268:	3c f4       	brge	.+14     	; 0x278 <int_to_string_fixed+0x16>
		*buffer++ = '-'; // Add minus sign for negative values
 26a:	2d e2       	ldi	r18, 0x2D	; 45
 26c:	20 83       	st	Z, r18
		value = -value;
 26e:	91 95       	neg	r25
 270:	81 95       	neg	r24
 272:	91 09       	sbc	r25, r1
		width--;
 274:	41 50       	subi	r20, 0x01	; 1
	return (value & 0xFFF) * 0.0625; // Convert to Celsius
}

void int_to_string_fixed(char* buffer, int value, uint8_t width) {
	if (value < 0) {
		*buffer++ = '-'; // Add minus sign for negative values
 276:	31 96       	adiw	r30, 0x01	; 1
		value = -value;
		width--;
	}
	
	buffer += width; // Move to the end of the buffer
 278:	24 2f       	mov	r18, r20
 27a:	30 e0       	ldi	r19, 0x00	; 0
 27c:	df 01       	movw	r26, r30
 27e:	a2 0f       	add	r26, r18
 280:	b3 1f       	adc	r27, r19
	*buffer-- = '\0'; // Null-terminate the string
 282:	21 50       	subi	r18, 0x01	; 1
 284:	31 09       	sbc	r19, r1
 286:	e2 0f       	add	r30, r18
 288:	f3 1f       	adc	r31, r19
 28a:	1c 92       	st	X, r1
	
	for (int i = 0; i < width; i++) {
 28c:	20 e0       	ldi	r18, 0x00	; 0
 28e:	30 e0       	ldi	r19, 0x00	; 0
 290:	12 c0       	rjmp	.+36     	; 0x2b6 <int_to_string_fixed+0x54>
		if (value > 0) {
 292:	18 16       	cp	r1, r24
 294:	19 06       	cpc	r1, r25
 296:	54 f4       	brge	.+20     	; 0x2ac <int_to_string_fixed+0x4a>
			*buffer-- = (value % 10) + '0'; // Convert digit to character
 298:	6a e0       	ldi	r22, 0x0A	; 10
 29a:	70 e0       	ldi	r23, 0x00	; 0
 29c:	0e 94 0e 03 	call	0x61c	; 0x61c <__divmodhi4>
 2a0:	80 5d       	subi	r24, 0xD0	; 208
 2a2:	80 83       	st	Z, r24
			value /= 10;
 2a4:	86 2f       	mov	r24, r22
 2a6:	97 2f       	mov	r25, r23
	buffer += width; // Move to the end of the buffer
	*buffer-- = '\0'; // Null-terminate the string
	
	for (int i = 0; i < width; i++) {
		if (value > 0) {
			*buffer-- = (value % 10) + '0'; // Convert digit to character
 2a8:	31 97       	sbiw	r30, 0x01	; 1
 2aa:	03 c0       	rjmp	.+6      	; 0x2b2 <int_to_string_fixed+0x50>
			value /= 10;
			} else {
			*buffer-- = '0'; // Fill remaining width with zeros
 2ac:	50 e3       	ldi	r21, 0x30	; 48
 2ae:	50 83       	st	Z, r21
 2b0:	31 97       	sbiw	r30, 0x01	; 1
	}
	
	buffer += width; // Move to the end of the buffer
	*buffer-- = '\0'; // Null-terminate the string
	
	for (int i = 0; i < width; i++) {
 2b2:	2f 5f       	subi	r18, 0xFF	; 255
 2b4:	3f 4f       	sbci	r19, 0xFF	; 255
 2b6:	64 2f       	mov	r22, r20
 2b8:	70 e0       	ldi	r23, 0x00	; 0
 2ba:	26 17       	cp	r18, r22
 2bc:	37 07       	cpc	r19, r23
 2be:	4c f3       	brlt	.-46     	; 0x292 <int_to_string_fixed+0x30>
			value /= 10;
			} else {
			*buffer-- = '0'; // Fill remaining width with zeros
		}
	}
}
 2c0:	08 95       	ret

000002c2 <display_temperatures_test>:

void display_temperatures_test(int thermocouple_temp, int internal_temp) {
 2c2:	ef 92       	push	r14
 2c4:	ff 92       	push	r15
 2c6:	0f 93       	push	r16
 2c8:	1f 93       	push	r17
 2ca:	cf 93       	push	r28
 2cc:	df 93       	push	r29
 2ce:	cd b7       	in	r28, 0x3d	; 61
 2d0:	de b7       	in	r29, 0x3e	; 62
 2d2:	60 97       	sbiw	r28, 0x10	; 16
 2d4:	0f b6       	in	r0, 0x3f	; 63
 2d6:	f8 94       	cli
 2d8:	de bf       	out	0x3e, r29	; 62
 2da:	0f be       	out	0x3f, r0	; 63
 2dc:	cd bf       	out	0x3d, r28	; 61
 2de:	8c 01       	movw	r16, r24
 2e0:	7b 01       	movw	r14, r22
	char buffer[16];
	
	lcd_cmd(0x80 | 0x00);  // Move cursor to the first line
 2e2:	80 e8       	ldi	r24, 0x80	; 128
 2e4:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
	if (thermocouple_temp >= 0) {
 2e8:	11 23       	and	r17, r17
 2ea:	9c f0       	brlt	.+38     	; 0x312 <display_temperatures_test+0x50>
		int_to_string_fixed(buffer, thermocouple_temp, 4); // Convert temperature to string
 2ec:	44 e0       	ldi	r20, 0x04	; 4
 2ee:	b8 01       	movw	r22, r16
 2f0:	ce 01       	movw	r24, r28
 2f2:	01 96       	adiw	r24, 0x01	; 1
 2f4:	0e 94 31 01 	call	0x262	; 0x262 <int_to_string_fixed>
		lcd_print("Temp:");
 2f8:	80 e6       	ldi	r24, 0x60	; 96
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	0e 94 94 00 	call	0x128	; 0x128 <lcd_print>
		lcd_print(buffer);
 300:	ce 01       	movw	r24, r28
 302:	01 96       	adiw	r24, 0x01	; 1
 304:	0e 94 94 00 	call	0x128	; 0x128 <lcd_print>
		lcd_print("_C");
 308:	86 e6       	ldi	r24, 0x66	; 102
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	0e 94 94 00 	call	0x128	; 0x128 <lcd_print>
 310:	04 c0       	rjmp	.+8      	; 0x31a <display_temperatures_test+0x58>
		} else {
		lcd_print("Temp:Error");
 312:	89 e6       	ldi	r24, 0x69	; 105
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	0e 94 94 00 	call	0x128	; 0x128 <lcd_print>
	}
	
	lcd_cmd(0x80 | 0x40);  // Move cursor to the second line
 31a:	80 ec       	ldi	r24, 0xC0	; 192
 31c:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
	if (internal_temp >= 0) {
 320:	ff 20       	and	r15, r15
 322:	9c f0       	brlt	.+38     	; 0x34a <display_temperatures_test+0x88>
		int_to_string_fixed(buffer, internal_temp, 4); // Convert temperature to string
 324:	44 e0       	ldi	r20, 0x04	; 4
 326:	b7 01       	movw	r22, r14
 328:	ce 01       	movw	r24, r28
 32a:	01 96       	adiw	r24, 0x01	; 1
 32c:	0e 94 31 01 	call	0x262	; 0x262 <int_to_string_fixed>
		lcd_print("Cold:");
 330:	84 e7       	ldi	r24, 0x74	; 116
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	0e 94 94 00 	call	0x128	; 0x128 <lcd_print>
		lcd_print(buffer);
 338:	ce 01       	movw	r24, r28
 33a:	01 96       	adiw	r24, 0x01	; 1
 33c:	0e 94 94 00 	call	0x128	; 0x128 <lcd_print>
		lcd_print("_C");
 340:	86 e6       	ldi	r24, 0x66	; 102
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	0e 94 94 00 	call	0x128	; 0x128 <lcd_print>
 348:	04 c0       	rjmp	.+8      	; 0x352 <display_temperatures_test+0x90>
		} else {
		lcd_print("Cold:Error");
 34a:	8a e7       	ldi	r24, 0x7A	; 122
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	0e 94 94 00 	call	0x128	; 0x128 <lcd_print>
	}
}
 352:	60 96       	adiw	r28, 0x10	; 16
 354:	0f b6       	in	r0, 0x3f	; 63
 356:	f8 94       	cli
 358:	de bf       	out	0x3e, r29	; 62
 35a:	0f be       	out	0x3f, r0	; 63
 35c:	cd bf       	out	0x3d, r28	; 61
 35e:	df 91       	pop	r29
 360:	cf 91       	pop	r28
 362:	1f 91       	pop	r17
 364:	0f 91       	pop	r16
 366:	ff 90       	pop	r15
 368:	ef 90       	pop	r14
 36a:	08 95       	ret

0000036c <main>:
float get_internal_temp(int32_t value); // Converts raw value to internal temperature


int main(void)
{
	lcd_init();
 36c:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_init>
	spi_init();
 370:	0e 94 a1 00 	call	0x142	; 0x142 <spi_init>
	
	while (1)
	{
		int32_t value = read_max31855();
 374:	0e 94 b0 00 	call	0x160	; 0x160 <read_max31855>
 378:	6b 01       	movw	r12, r22
 37a:	7c 01       	movw	r14, r24
		float thermocouple_temp = get_thermocouple_temp(value);
 37c:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <get_thermocouple_temp>
 380:	4b 01       	movw	r8, r22
 382:	5c 01       	movw	r10, r24
		float internal_temp = get_internal_temp(value);
 384:	c7 01       	movw	r24, r14
 386:	b6 01       	movw	r22, r12
 388:	0e 94 14 01 	call	0x228	; 0x228 <get_internal_temp>
		
		display_temperatures_test(thermocouple_temp, internal_temp);
 38c:	0e 94 dd 01 	call	0x3ba	; 0x3ba <__fixsfsi>
 390:	6b 01       	movw	r12, r22
 392:	7c 01       	movw	r14, r24
 394:	c5 01       	movw	r24, r10
 396:	b4 01       	movw	r22, r8
 398:	0e 94 dd 01 	call	0x3ba	; 0x3ba <__fixsfsi>
 39c:	dc 01       	movw	r26, r24
 39e:	cb 01       	movw	r24, r22
 3a0:	b6 01       	movw	r22, r12
 3a2:	0e 94 61 01 	call	0x2c2	; 0x2c2 <display_temperatures_test>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3a6:	2f e3       	ldi	r18, 0x3F	; 63
 3a8:	8d e0       	ldi	r24, 0x0D	; 13
 3aa:	93 e0       	ldi	r25, 0x03	; 3
 3ac:	21 50       	subi	r18, 0x01	; 1
 3ae:	80 40       	sbci	r24, 0x00	; 0
 3b0:	90 40       	sbci	r25, 0x00	; 0
 3b2:	e1 f7       	brne	.-8      	; 0x3ac <main+0x40>
 3b4:	00 c0       	rjmp	.+0      	; 0x3b6 <main+0x4a>
 3b6:	00 00       	nop
 3b8:	dd cf       	rjmp	.-70     	; 0x374 <main+0x8>

000003ba <__fixsfsi>:
 3ba:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <__fixunssfsi>
 3be:	68 94       	set
 3c0:	b1 11       	cpse	r27, r1
 3c2:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__fp_szero>
 3c6:	08 95       	ret

000003c8 <__fixunssfsi>:
 3c8:	0e 94 58 02 	call	0x4b0	; 0x4b0 <__fp_splitA>
 3cc:	88 f0       	brcs	.+34     	; 0x3f0 <__fixunssfsi+0x28>
 3ce:	9f 57       	subi	r25, 0x7F	; 127
 3d0:	98 f0       	brcs	.+38     	; 0x3f8 <__fixunssfsi+0x30>
 3d2:	b9 2f       	mov	r27, r25
 3d4:	99 27       	eor	r25, r25
 3d6:	b7 51       	subi	r27, 0x17	; 23
 3d8:	b0 f0       	brcs	.+44     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 3da:	e1 f0       	breq	.+56     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 3dc:	66 0f       	add	r22, r22
 3de:	77 1f       	adc	r23, r23
 3e0:	88 1f       	adc	r24, r24
 3e2:	99 1f       	adc	r25, r25
 3e4:	1a f0       	brmi	.+6      	; 0x3ec <__fixunssfsi+0x24>
 3e6:	ba 95       	dec	r27
 3e8:	c9 f7       	brne	.-14     	; 0x3dc <__fixunssfsi+0x14>
 3ea:	14 c0       	rjmp	.+40     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 3ec:	b1 30       	cpi	r27, 0x01	; 1
 3ee:	91 f0       	breq	.+36     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 3f0:	0e 94 72 02 	call	0x4e4	; 0x4e4 <__fp_zero>
 3f4:	b1 e0       	ldi	r27, 0x01	; 1
 3f6:	08 95       	ret
 3f8:	0c 94 72 02 	jmp	0x4e4	; 0x4e4 <__fp_zero>
 3fc:	67 2f       	mov	r22, r23
 3fe:	78 2f       	mov	r23, r24
 400:	88 27       	eor	r24, r24
 402:	b8 5f       	subi	r27, 0xF8	; 248
 404:	39 f0       	breq	.+14     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 406:	b9 3f       	cpi	r27, 0xF9	; 249
 408:	cc f3       	brlt	.-14     	; 0x3fc <__fixunssfsi+0x34>
 40a:	86 95       	lsr	r24
 40c:	77 95       	ror	r23
 40e:	67 95       	ror	r22
 410:	b3 95       	inc	r27
 412:	d9 f7       	brne	.-10     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 414:	3e f4       	brtc	.+14     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 416:	90 95       	com	r25
 418:	80 95       	com	r24
 41a:	70 95       	com	r23
 41c:	61 95       	neg	r22
 41e:	7f 4f       	sbci	r23, 0xFF	; 255
 420:	8f 4f       	sbci	r24, 0xFF	; 255
 422:	9f 4f       	sbci	r25, 0xFF	; 255
 424:	08 95       	ret

00000426 <__floatunsisf>:
 426:	e8 94       	clt
 428:	09 c0       	rjmp	.+18     	; 0x43c <__floatsisf+0x12>

0000042a <__floatsisf>:
 42a:	97 fb       	bst	r25, 7
 42c:	3e f4       	brtc	.+14     	; 0x43c <__floatsisf+0x12>
 42e:	90 95       	com	r25
 430:	80 95       	com	r24
 432:	70 95       	com	r23
 434:	61 95       	neg	r22
 436:	7f 4f       	sbci	r23, 0xFF	; 255
 438:	8f 4f       	sbci	r24, 0xFF	; 255
 43a:	9f 4f       	sbci	r25, 0xFF	; 255
 43c:	99 23       	and	r25, r25
 43e:	a9 f0       	breq	.+42     	; 0x46a <__floatsisf+0x40>
 440:	f9 2f       	mov	r31, r25
 442:	96 e9       	ldi	r25, 0x96	; 150
 444:	bb 27       	eor	r27, r27
 446:	93 95       	inc	r25
 448:	f6 95       	lsr	r31
 44a:	87 95       	ror	r24
 44c:	77 95       	ror	r23
 44e:	67 95       	ror	r22
 450:	b7 95       	ror	r27
 452:	f1 11       	cpse	r31, r1
 454:	f8 cf       	rjmp	.-16     	; 0x446 <__floatsisf+0x1c>
 456:	fa f4       	brpl	.+62     	; 0x496 <__floatsisf+0x6c>
 458:	bb 0f       	add	r27, r27
 45a:	11 f4       	brne	.+4      	; 0x460 <__floatsisf+0x36>
 45c:	60 ff       	sbrs	r22, 0
 45e:	1b c0       	rjmp	.+54     	; 0x496 <__floatsisf+0x6c>
 460:	6f 5f       	subi	r22, 0xFF	; 255
 462:	7f 4f       	sbci	r23, 0xFF	; 255
 464:	8f 4f       	sbci	r24, 0xFF	; 255
 466:	9f 4f       	sbci	r25, 0xFF	; 255
 468:	16 c0       	rjmp	.+44     	; 0x496 <__floatsisf+0x6c>
 46a:	88 23       	and	r24, r24
 46c:	11 f0       	breq	.+4      	; 0x472 <__floatsisf+0x48>
 46e:	96 e9       	ldi	r25, 0x96	; 150
 470:	11 c0       	rjmp	.+34     	; 0x494 <__floatsisf+0x6a>
 472:	77 23       	and	r23, r23
 474:	21 f0       	breq	.+8      	; 0x47e <__floatsisf+0x54>
 476:	9e e8       	ldi	r25, 0x8E	; 142
 478:	87 2f       	mov	r24, r23
 47a:	76 2f       	mov	r23, r22
 47c:	05 c0       	rjmp	.+10     	; 0x488 <__floatsisf+0x5e>
 47e:	66 23       	and	r22, r22
 480:	71 f0       	breq	.+28     	; 0x49e <__floatsisf+0x74>
 482:	96 e8       	ldi	r25, 0x86	; 134
 484:	86 2f       	mov	r24, r22
 486:	70 e0       	ldi	r23, 0x00	; 0
 488:	60 e0       	ldi	r22, 0x00	; 0
 48a:	2a f0       	brmi	.+10     	; 0x496 <__floatsisf+0x6c>
 48c:	9a 95       	dec	r25
 48e:	66 0f       	add	r22, r22
 490:	77 1f       	adc	r23, r23
 492:	88 1f       	adc	r24, r24
 494:	da f7       	brpl	.-10     	; 0x48c <__floatsisf+0x62>
 496:	88 0f       	add	r24, r24
 498:	96 95       	lsr	r25
 49a:	87 95       	ror	r24
 49c:	97 f9       	bld	r25, 7
 49e:	08 95       	ret

000004a0 <__fp_split3>:
 4a0:	57 fd       	sbrc	r21, 7
 4a2:	90 58       	subi	r25, 0x80	; 128
 4a4:	44 0f       	add	r20, r20
 4a6:	55 1f       	adc	r21, r21
 4a8:	59 f0       	breq	.+22     	; 0x4c0 <__fp_splitA+0x10>
 4aa:	5f 3f       	cpi	r21, 0xFF	; 255
 4ac:	71 f0       	breq	.+28     	; 0x4ca <__fp_splitA+0x1a>
 4ae:	47 95       	ror	r20

000004b0 <__fp_splitA>:
 4b0:	88 0f       	add	r24, r24
 4b2:	97 fb       	bst	r25, 7
 4b4:	99 1f       	adc	r25, r25
 4b6:	61 f0       	breq	.+24     	; 0x4d0 <__fp_splitA+0x20>
 4b8:	9f 3f       	cpi	r25, 0xFF	; 255
 4ba:	79 f0       	breq	.+30     	; 0x4da <__fp_splitA+0x2a>
 4bc:	87 95       	ror	r24
 4be:	08 95       	ret
 4c0:	12 16       	cp	r1, r18
 4c2:	13 06       	cpc	r1, r19
 4c4:	14 06       	cpc	r1, r20
 4c6:	55 1f       	adc	r21, r21
 4c8:	f2 cf       	rjmp	.-28     	; 0x4ae <__fp_split3+0xe>
 4ca:	46 95       	lsr	r20
 4cc:	f1 df       	rcall	.-30     	; 0x4b0 <__fp_splitA>
 4ce:	08 c0       	rjmp	.+16     	; 0x4e0 <__fp_splitA+0x30>
 4d0:	16 16       	cp	r1, r22
 4d2:	17 06       	cpc	r1, r23
 4d4:	18 06       	cpc	r1, r24
 4d6:	99 1f       	adc	r25, r25
 4d8:	f1 cf       	rjmp	.-30     	; 0x4bc <__fp_splitA+0xc>
 4da:	86 95       	lsr	r24
 4dc:	71 05       	cpc	r23, r1
 4de:	61 05       	cpc	r22, r1
 4e0:	08 94       	sec
 4e2:	08 95       	ret

000004e4 <__fp_zero>:
 4e4:	e8 94       	clt

000004e6 <__fp_szero>:
 4e6:	bb 27       	eor	r27, r27
 4e8:	66 27       	eor	r22, r22
 4ea:	77 27       	eor	r23, r23
 4ec:	cb 01       	movw	r24, r22
 4ee:	97 f9       	bld	r25, 7
 4f0:	08 95       	ret

000004f2 <__mulsf3>:
 4f2:	0e 94 8c 02 	call	0x518	; 0x518 <__mulsf3x>
 4f6:	0c 94 fd 02 	jmp	0x5fa	; 0x5fa <__fp_round>
 4fa:	0e 94 ef 02 	call	0x5de	; 0x5de <__fp_pscA>
 4fe:	38 f0       	brcs	.+14     	; 0x50e <__mulsf3+0x1c>
 500:	0e 94 f6 02 	call	0x5ec	; 0x5ec <__fp_pscB>
 504:	20 f0       	brcs	.+8      	; 0x50e <__mulsf3+0x1c>
 506:	95 23       	and	r25, r21
 508:	11 f0       	breq	.+4      	; 0x50e <__mulsf3+0x1c>
 50a:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__fp_inf>
 50e:	0c 94 ec 02 	jmp	0x5d8	; 0x5d8 <__fp_nan>
 512:	11 24       	eor	r1, r1
 514:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__fp_szero>

00000518 <__mulsf3x>:
 518:	0e 94 50 02 	call	0x4a0	; 0x4a0 <__fp_split3>
 51c:	70 f3       	brcs	.-36     	; 0x4fa <__mulsf3+0x8>

0000051e <__mulsf3_pse>:
 51e:	95 9f       	mul	r25, r21
 520:	c1 f3       	breq	.-16     	; 0x512 <__mulsf3+0x20>
 522:	95 0f       	add	r25, r21
 524:	50 e0       	ldi	r21, 0x00	; 0
 526:	55 1f       	adc	r21, r21
 528:	62 9f       	mul	r22, r18
 52a:	f0 01       	movw	r30, r0
 52c:	72 9f       	mul	r23, r18
 52e:	bb 27       	eor	r27, r27
 530:	f0 0d       	add	r31, r0
 532:	b1 1d       	adc	r27, r1
 534:	63 9f       	mul	r22, r19
 536:	aa 27       	eor	r26, r26
 538:	f0 0d       	add	r31, r0
 53a:	b1 1d       	adc	r27, r1
 53c:	aa 1f       	adc	r26, r26
 53e:	64 9f       	mul	r22, r20
 540:	66 27       	eor	r22, r22
 542:	b0 0d       	add	r27, r0
 544:	a1 1d       	adc	r26, r1
 546:	66 1f       	adc	r22, r22
 548:	82 9f       	mul	r24, r18
 54a:	22 27       	eor	r18, r18
 54c:	b0 0d       	add	r27, r0
 54e:	a1 1d       	adc	r26, r1
 550:	62 1f       	adc	r22, r18
 552:	73 9f       	mul	r23, r19
 554:	b0 0d       	add	r27, r0
 556:	a1 1d       	adc	r26, r1
 558:	62 1f       	adc	r22, r18
 55a:	83 9f       	mul	r24, r19
 55c:	a0 0d       	add	r26, r0
 55e:	61 1d       	adc	r22, r1
 560:	22 1f       	adc	r18, r18
 562:	74 9f       	mul	r23, r20
 564:	33 27       	eor	r19, r19
 566:	a0 0d       	add	r26, r0
 568:	61 1d       	adc	r22, r1
 56a:	23 1f       	adc	r18, r19
 56c:	84 9f       	mul	r24, r20
 56e:	60 0d       	add	r22, r0
 570:	21 1d       	adc	r18, r1
 572:	82 2f       	mov	r24, r18
 574:	76 2f       	mov	r23, r22
 576:	6a 2f       	mov	r22, r26
 578:	11 24       	eor	r1, r1
 57a:	9f 57       	subi	r25, 0x7F	; 127
 57c:	50 40       	sbci	r21, 0x00	; 0
 57e:	9a f0       	brmi	.+38     	; 0x5a6 <__mulsf3_pse+0x88>
 580:	f1 f0       	breq	.+60     	; 0x5be <__mulsf3_pse+0xa0>
 582:	88 23       	and	r24, r24
 584:	4a f0       	brmi	.+18     	; 0x598 <__mulsf3_pse+0x7a>
 586:	ee 0f       	add	r30, r30
 588:	ff 1f       	adc	r31, r31
 58a:	bb 1f       	adc	r27, r27
 58c:	66 1f       	adc	r22, r22
 58e:	77 1f       	adc	r23, r23
 590:	88 1f       	adc	r24, r24
 592:	91 50       	subi	r25, 0x01	; 1
 594:	50 40       	sbci	r21, 0x00	; 0
 596:	a9 f7       	brne	.-22     	; 0x582 <__mulsf3_pse+0x64>
 598:	9e 3f       	cpi	r25, 0xFE	; 254
 59a:	51 05       	cpc	r21, r1
 59c:	80 f0       	brcs	.+32     	; 0x5be <__mulsf3_pse+0xa0>
 59e:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__fp_inf>
 5a2:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__fp_szero>
 5a6:	5f 3f       	cpi	r21, 0xFF	; 255
 5a8:	e4 f3       	brlt	.-8      	; 0x5a2 <__mulsf3_pse+0x84>
 5aa:	98 3e       	cpi	r25, 0xE8	; 232
 5ac:	d4 f3       	brlt	.-12     	; 0x5a2 <__mulsf3_pse+0x84>
 5ae:	86 95       	lsr	r24
 5b0:	77 95       	ror	r23
 5b2:	67 95       	ror	r22
 5b4:	b7 95       	ror	r27
 5b6:	f7 95       	ror	r31
 5b8:	e7 95       	ror	r30
 5ba:	9f 5f       	subi	r25, 0xFF	; 255
 5bc:	c1 f7       	brne	.-16     	; 0x5ae <__mulsf3_pse+0x90>
 5be:	fe 2b       	or	r31, r30
 5c0:	88 0f       	add	r24, r24
 5c2:	91 1d       	adc	r25, r1
 5c4:	96 95       	lsr	r25
 5c6:	87 95       	ror	r24
 5c8:	97 f9       	bld	r25, 7
 5ca:	08 95       	ret

000005cc <__fp_inf>:
 5cc:	97 f9       	bld	r25, 7
 5ce:	9f 67       	ori	r25, 0x7F	; 127
 5d0:	80 e8       	ldi	r24, 0x80	; 128
 5d2:	70 e0       	ldi	r23, 0x00	; 0
 5d4:	60 e0       	ldi	r22, 0x00	; 0
 5d6:	08 95       	ret

000005d8 <__fp_nan>:
 5d8:	9f ef       	ldi	r25, 0xFF	; 255
 5da:	80 ec       	ldi	r24, 0xC0	; 192
 5dc:	08 95       	ret

000005de <__fp_pscA>:
 5de:	00 24       	eor	r0, r0
 5e0:	0a 94       	dec	r0
 5e2:	16 16       	cp	r1, r22
 5e4:	17 06       	cpc	r1, r23
 5e6:	18 06       	cpc	r1, r24
 5e8:	09 06       	cpc	r0, r25
 5ea:	08 95       	ret

000005ec <__fp_pscB>:
 5ec:	00 24       	eor	r0, r0
 5ee:	0a 94       	dec	r0
 5f0:	12 16       	cp	r1, r18
 5f2:	13 06       	cpc	r1, r19
 5f4:	14 06       	cpc	r1, r20
 5f6:	05 06       	cpc	r0, r21
 5f8:	08 95       	ret

000005fa <__fp_round>:
 5fa:	09 2e       	mov	r0, r25
 5fc:	03 94       	inc	r0
 5fe:	00 0c       	add	r0, r0
 600:	11 f4       	brne	.+4      	; 0x606 <__fp_round+0xc>
 602:	88 23       	and	r24, r24
 604:	52 f0       	brmi	.+20     	; 0x61a <__fp_round+0x20>
 606:	bb 0f       	add	r27, r27
 608:	40 f4       	brcc	.+16     	; 0x61a <__fp_round+0x20>
 60a:	bf 2b       	or	r27, r31
 60c:	11 f4       	brne	.+4      	; 0x612 <__fp_round+0x18>
 60e:	60 ff       	sbrs	r22, 0
 610:	04 c0       	rjmp	.+8      	; 0x61a <__fp_round+0x20>
 612:	6f 5f       	subi	r22, 0xFF	; 255
 614:	7f 4f       	sbci	r23, 0xFF	; 255
 616:	8f 4f       	sbci	r24, 0xFF	; 255
 618:	9f 4f       	sbci	r25, 0xFF	; 255
 61a:	08 95       	ret

0000061c <__divmodhi4>:
 61c:	97 fb       	bst	r25, 7
 61e:	07 2e       	mov	r0, r23
 620:	16 f4       	brtc	.+4      	; 0x626 <__divmodhi4+0xa>
 622:	00 94       	com	r0
 624:	07 d0       	rcall	.+14     	; 0x634 <__divmodhi4_neg1>
 626:	77 fd       	sbrc	r23, 7
 628:	09 d0       	rcall	.+18     	; 0x63c <__divmodhi4_neg2>
 62a:	0e 94 22 03 	call	0x644	; 0x644 <__udivmodhi4>
 62e:	07 fc       	sbrc	r0, 7
 630:	05 d0       	rcall	.+10     	; 0x63c <__divmodhi4_neg2>
 632:	3e f4       	brtc	.+14     	; 0x642 <__divmodhi4_exit>

00000634 <__divmodhi4_neg1>:
 634:	90 95       	com	r25
 636:	81 95       	neg	r24
 638:	9f 4f       	sbci	r25, 0xFF	; 255
 63a:	08 95       	ret

0000063c <__divmodhi4_neg2>:
 63c:	70 95       	com	r23
 63e:	61 95       	neg	r22
 640:	7f 4f       	sbci	r23, 0xFF	; 255

00000642 <__divmodhi4_exit>:
 642:	08 95       	ret

00000644 <__udivmodhi4>:
 644:	aa 1b       	sub	r26, r26
 646:	bb 1b       	sub	r27, r27
 648:	51 e1       	ldi	r21, 0x11	; 17
 64a:	07 c0       	rjmp	.+14     	; 0x65a <__udivmodhi4_ep>

0000064c <__udivmodhi4_loop>:
 64c:	aa 1f       	adc	r26, r26
 64e:	bb 1f       	adc	r27, r27
 650:	a6 17       	cp	r26, r22
 652:	b7 07       	cpc	r27, r23
 654:	10 f0       	brcs	.+4      	; 0x65a <__udivmodhi4_ep>
 656:	a6 1b       	sub	r26, r22
 658:	b7 0b       	sbc	r27, r23

0000065a <__udivmodhi4_ep>:
 65a:	88 1f       	adc	r24, r24
 65c:	99 1f       	adc	r25, r25
 65e:	5a 95       	dec	r21
 660:	a9 f7       	brne	.-22     	; 0x64c <__udivmodhi4_loop>
 662:	80 95       	com	r24
 664:	90 95       	com	r25
 666:	bc 01       	movw	r22, r24
 668:	cd 01       	movw	r24, r26
 66a:	08 95       	ret

0000066c <_exit>:
 66c:	f8 94       	cli

0000066e <__stop_program>:
 66e:	ff cf       	rjmp	.-2      	; 0x66e <__stop_program>
